Index: controllers/UsersController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sendRegistrationEmail from \"../helper/sendMail\";\r\nimport HttpError from \"http-errors\";\r\nimport JWT from \"jsonwebtoken\";\r\nimport { Users } from \"../models\";\r\nimport { OAuth2Client } from \"google-auth-library\";\r\n\r\nconst { JWT_SECRET } = process.env;\r\n\r\n\r\nclass UsersController {\r\n\r\n    static async register(req, res, next) {\r\n        try {\r\n\r\n            const { firstName, lastName, email, password } = req.body;\r\n\r\n            const userExists = await Users.findOne({\r\n                where: { email },\r\n            });\r\n\r\n            if (userExists) {\r\n                throw HttpError(409, {\r\n                    errors: {\r\n                        exists: 'Already registered'\r\n                    }\r\n                })\r\n            }\r\n\r\n            const veryfication = JWT.sign({ email: email }, JWT_SECRET);\r\n\r\n            const newUser = await Users.create({\r\n                firstName, lastName, email, password, veryfication: veryfication\r\n            });\r\n\r\n            await sendRegistrationEmail(newUser);\r\n\r\n            res.json({\r\n                status: \"ok\",\r\n                newUser\r\n            })\r\n        } catch (e) {\r\n            next(e)\r\n        }\r\n    }\r\n\r\n    static async activate(req, res, next) {\r\n        try {\r\n            const { code } = req.body;\r\n            let email;\r\n\r\n            try {\r\n                const decodedEmail = JWT.verify(code, JWT_SECRET);\r\n                email = decodedEmail.email;\r\n            }\r\n            catch (jwtError) {\r\n                throw HttpError(422, {\r\n                    errors: {\r\n                        code: 'Invalid Verification Code'\r\n                    }\r\n                });\r\n            }\r\n\r\n            const userExists = await Users.findOne({\r\n                where: { veryfication: code }\r\n            });\r\n\r\n            if (!userExists || userExists.email !== email) {\r\n                throw HttpError(422, {\r\n                    errors: {\r\n                        code: 'Invalid Veryfication Code'\r\n                    }\r\n                })\r\n            }\r\n\r\n            await Users.update(\r\n                { status: 'active' },\r\n                {\r\n                    where: { email },\r\n                })\r\n\r\n            res.json({\r\n                status: 'ok',\r\n                email,\r\n            })\r\n\r\n        }\r\n        catch (e) {\r\n            next(e)\r\n        }\r\n    }\r\n\r\n    static async login(req, res, next) {\r\n        try {\r\n            const { email, password } = req.body;\r\n\r\n            const user = await Users.findOne({\r\n                where: {\r\n                    email,\r\n                    password: Users.passwordHash(password)\r\n                },\r\n                attributes: {\r\n                    exclude: ['veryfication', 'createdAt', 'updatedAt'],\r\n                    role:'user'\r\n                },\r\n            });\r\n\r\n            if (!user) {\r\n                throw HttpError(404, 'Invalid email or password');\r\n            }\r\n\r\n            else if(user.status !== 'active'){\r\n                throw HttpError(404, \"You didn't activate your account\");\r\n            }\r\n\r\n            const token = JWT.sign({ userId: user.id }, JWT_SECRET);\r\n\r\n            res.json({\r\n                status: 'ok',\r\n                user,\r\n                token,\r\n            });\r\n        }\r\n        catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    static async oauth(req, res, next) {\r\n        try {\r\n            const { googleToken } = req.body;\r\n            let token, user\r\n            console.log(googleToken)\r\n\r\n            if (googleToken) {\r\n\r\n                const client = new OAuth2Client('40153693711-ajrviope1cfv0g0e9knenah2tpok0m2j.apps.googleusercontent.com');\r\n                const ticket = await client.verifyIdToken({\r\n                    idToken: googleToken,\r\n                    audience: '40153693711-ajrviope1cfv0g0e9knenah2tpok0m2j.apps.googleusercontent.com',\r\n                });\r\n                const payload = ticket.getPayload();\r\n\r\n                console.log(payload)\r\n\r\n                const email = payload.email;\r\n\r\n                 user = await Users.findOne({ where: { email } });\r\n               \r\n                if (!user) {\r\n\r\n                     user = await Users.create({\r\n                        firstName: payload.given_name,\r\n                        lastName: payload.family_name,\r\n                        email: payload.email,\r\n                        photo: payload.picture,\r\n                        status:'active',\r\n                        isOauth:true\r\n                    })\r\n                     token = JWT.sign({ userId: user.id }, JWT_SECRET);\r\n                }\r\n\r\n                else {\r\n                    token = JWT.sign({ userId: user.id }, JWT_SECRET);\r\n                }\r\n\r\n\r\n\r\n                res.json({\r\n                    status: 'ok',\r\n                    user,\r\n                    token,\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            next(e)\r\n        }\r\n    }\r\n\r\n    static async profile(req, res, next) {\r\n        try {\r\n\r\n            const userId = req.userId;\r\n            const userProfile = await Users.findByPk(userId, {\r\n                attributes: { exclude: ['veryfication', 'createdAt', 'updatedAt'] }\r\n            });\r\n\r\n            res.json({\r\n                status: 'ok',\r\n                userProfile\r\n            })\r\n        }\r\n        catch (e) {\r\n            next(e)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default UsersController
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/UsersController.js b/controllers/UsersController.js
--- a/controllers/UsersController.js	(revision ee063952b1a4e554ecc9f1a72f047d6dc2dbced2)
+++ b/controllers/UsersController.js	(date 1701374403262)
@@ -1,8 +1,7 @@
 import sendRegistrationEmail from "../helper/sendMail";
+import { Users } from "../models";
 import HttpError from "http-errors";
 import JWT from "jsonwebtoken";
-import { Users } from "../models";
-import { OAuth2Client } from "google-auth-library";
 
 const { JWT_SECRET } = process.env;
 
@@ -15,13 +14,13 @@
             const { firstName, lastName, email, password } = req.body;
 
             const userExists = await Users.findOne({
-                where: { email },
+                where: { email }
             });
 
             if (userExists) {
                 throw HttpError(409, {
                     errors: {
-                        exists: 'Already registered'
+                        email: 'Already registered'
                     }
                 })
             }
@@ -91,25 +90,26 @@
 
     static async login(req, res, next) {
         try {
+
             const { email, password } = req.body;
 
             const user = await Users.findOne({
                 where: {
                     email,
-                    password: Users.passwordHash(password)
+                    password: Users.passwordHash(password),
+                    status: 'active'
                 },
                 attributes: {
-                    exclude: ['veryfication', 'createdAt', 'updatedAt'],
-                    role:'user'
-                },
+                    exclude: ['veryfication', 'createdAt','updatedAt']
+                }
             });
 
-            if (!user) {
-                throw HttpError(404, 'Invalid email or password');
-            }
-
-            else if(user.status !== 'active'){
-                throw HttpError(404, "You didn't activate your account");
+            if(!user){
+                throw HttpError(404, {
+                    errors:{
+                        message:'Invalid email or password'
+                    }
+                });
             }
 
             const token = JWT.sign({ userId: user.id }, JWT_SECRET);
@@ -117,84 +117,34 @@
             res.json({
                 status: 'ok',
                 user,
-                token,
-            });
+                token
+            })
+
+
         }
         catch (e) {
             next(e);
         }
     }
 
-    static async oauth(req, res, next) {
-        try {
-            const { googleToken } = req.body;
-            let token, user
-            console.log(googleToken)
-
-            if (googleToken) {
-
-                const client = new OAuth2Client('40153693711-ajrviope1cfv0g0e9knenah2tpok0m2j.apps.googleusercontent.com');
-                const ticket = await client.verifyIdToken({
-                    idToken: googleToken,
-                    audience: '40153693711-ajrviope1cfv0g0e9knenah2tpok0m2j.apps.googleusercontent.com',
-                });
-                const payload = ticket.getPayload();
-
-                console.log(payload)
-
-                const email = payload.email;
-
-                 user = await Users.findOne({ where: { email } });
-               
-                if (!user) {
-
-                     user = await Users.create({
-                        firstName: payload.given_name,
-                        lastName: payload.family_name,
-                        email: payload.email,
-                        photo: payload.picture,
-                        status:'active',
-                        isOauth:true
-                    })
-                     token = JWT.sign({ userId: user.id }, JWT_SECRET);
-                }
-
-                else {
-                    token = JWT.sign({ userId: user.id }, JWT_SECRET);
-                }
-
-
-
-                res.json({
-                    status: 'ok',
-                    user,
-                    token,
-                });
-            }
-        }
-        catch (e) {
-            next(e)
-        }
-    }
-
-    static async profile(req, res, next) {
-        try {
+    static async profile(req,res,next){
+        try{
 
             const userId = req.userId;
             const userProfile = await Users.findByPk(userId, {
-                attributes: { exclude: ['veryfication', 'createdAt', 'updatedAt'] }
+                attributes: { exclude: ['veryfication', 'createdAt','updatedAt'] }
             });
 
             res.json({
-                status: 'ok',
+                status:'ok',
                 userProfile
             })
         }
-        catch (e) {
+        catch(e){
             next(e)
         }
     }
 
 }
 
-export default UsersController
\ No newline at end of file
+export default UsersController
Index: routes/users.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Router } from \"express\";\r\nimport UsersController from \"../controllers/UsersController.js\";\r\nimport validate from \"../middlewares/validate.js\";\r\nimport usersSchema from \"../schema/usersSchema.js\";\r\n\r\nconst router = Router();\r\n\r\n\r\nrouter.post(\r\n  '/register',\r\n  validate(usersSchema.register),\r\n  UsersController.register\r\n);\r\n\r\nrouter.post('/activate', UsersController.activate)\r\n\r\nrouter.post('/login', validate(usersSchema.login), UsersController.login)\r\n\r\nrouter.get('/profile',UsersController.profile)\r\n\r\nrouter.post('/oauth',UsersController.oauth)\r\n\r\n\r\nexport default router;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/users.js b/routes/users.js
--- a/routes/users.js	(revision ee063952b1a4e554ecc9f1a72f047d6dc2dbced2)
+++ b/routes/users.js	(date 1701374403315)
@@ -13,7 +13,6 @@
 );
 
 router.post('/activate', UsersController.activate)
-
 router.post('/login', validate(usersSchema.login), UsersController.login)
 
 router.get('/profile',UsersController.profile)
@@ -21,4 +20,4 @@
 router.post('/oauth',UsersController.oauth)
 
 
-export default router;
\ No newline at end of file
+export default router;
Index: middlewares/authorization.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import jwt from \"jsonwebtoken\";\r\nimport HttpError from \"http-errors\";\r\n\r\nconst { JWT_SECRET } = process.env;\r\n\r\nconst EXCLUDES = [\r\n  'POST:/users/register',\r\n  'POST:/users/login',\r\n  'POST:/users/activate',\r\n  'POST:/users/oauth',\r\n  'POST:/categories/create',\r\n  'GET:/categories/list',\r\n  'POST:/toures/create',\r\n  'POST:/destinations/add',\r\n  'GET:/destinations/list',\r\n];\r\n\r\nexport default function authorization(req, res, next) {\r\n\r\n  try {\r\n    const requestPath = `${req.method}:${req.path}`;\r\n\r\n    if (EXCLUDES.includes(requestPath) || req.method === 'OPTIONS') {\r\n\r\n      next();\r\n      return;\r\n    }\r\n    if (requestPath.includes('PATCH:/categories/update/') || requestPath.includes('DELETE:/categories/delete/') ||  requestPath.includes('GET:/toures/getTour/') || requestPath.includes('DELETE:/toures/delete/') || requestPath.includes('PUT:/destinations/update/') || requestPath.includes('DELETE:/destinations/delete/') || requestPath.includes('GET:/destinations/getById/') || requestPath.includes('POST:/toursteps/create/') || requestPath.includes('PUT:/toursteps/update/') || requestPath.includes('DELETE:/toursteps/delete/')) {\r\n      next();\r\n      return;\r\n    }\r\n\r\n    const { authorization } = req.headers;\r\n\r\n    const { userId } = jwt.verify(authorization, JWT_SECRET)\r\n    if (!userId) {\r\n      throw HttpError(401)\r\n    }\r\n    req.userId = userId;\r\n    next();\r\n  } catch (e) {\r\n    e.status = 401;\r\n    next(e);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/middlewares/authorization.js b/middlewares/authorization.js
--- a/middlewares/authorization.js	(revision ee063952b1a4e554ecc9f1a72f047d6dc2dbced2)
+++ b/middlewares/authorization.js	(date 1701374403324)
@@ -31,8 +31,8 @@
     }
 
     const { authorization } = req.headers;
-
-    const { userId } = jwt.verify(authorization, JWT_SECRET)
+    const token = authorization.replace('Bearer', "").trim()
+    const { userId } = jwt.verify(token, JWT_SECRET)
     if (!userId) {
       throw HttpError(401)
     }
