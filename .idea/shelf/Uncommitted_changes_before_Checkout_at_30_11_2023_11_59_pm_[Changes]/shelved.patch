Index: controllers/UsersController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sendRegistrationEmail from \"../helper/sendMail\";\r\nimport { Users } from \"../models\";\r\nimport HttpError from \"http-errors\";\r\nimport JWT from \"jsonwebtoken\";\r\n\r\nconst { JWT_SECRET } = process.env;\r\n\r\n\r\nclass UsersController {\r\n\r\n    static async register(req, res, next) {\r\n        try {\r\n\r\n            const { firstName, lastName, email, password } = req.body;\r\n\r\n            const userExists = await Users.findOne({\r\n                where: { email }\r\n            });\r\n\r\n            if (userExists) {\r\n                throw HttpError(409, {\r\n                    errors: {\r\n                        email: 'Already registered'\r\n                    }\r\n                })\r\n            }\r\n\r\n            const veryfication = JWT.sign({ email: email }, JWT_SECRET);\r\n\r\n            const newUser = await Users.create({\r\n                firstName, lastName, email, password, veryfication: veryfication\r\n            });\r\n\r\n            await sendRegistrationEmail(newUser);\r\n\r\n            res.json({\r\n                status: \"ok\",\r\n                newUser\r\n            })\r\n        } catch (e) {\r\n            next(e)\r\n        }\r\n    }\r\n\r\n    static async activate(req, res, next) {\r\n        try {\r\n            const { code } = req.body;\r\n            let email;\r\n\r\n            try {\r\n                const decodedEmail = JWT.verify(code, JWT_SECRET);\r\n                email = decodedEmail.email;\r\n            }\r\n            catch (jwtError) {\r\n                throw HttpError(422, {\r\n                    errors: {\r\n                        code: 'Invalid Verification Code'\r\n                    }\r\n                });\r\n            }\r\n\r\n            const userExists = await Users.findOne({\r\n                where: { veryfication: code }\r\n            });\r\n\r\n            if (!userExists || userExists.email !== email) {\r\n                throw HttpError(422, {\r\n                    errors: {\r\n                        code: 'Invalid Veryfication Code'\r\n                    }\r\n                })\r\n            }\r\n\r\n            await Users.update(\r\n                { status: 'active' },\r\n                {\r\n                    where: { email },\r\n                })\r\n\r\n            res.json({\r\n                status: 'ok',\r\n                email,\r\n            })\r\n\r\n        }\r\n        catch (e) {\r\n            next(e)\r\n        }\r\n    }\r\n\r\n    static async login(req, res, next) {\r\n        try {\r\n\r\n            const { email, password } = req.body;\r\n\r\n            const user = await Users.findOne({\r\n                where: {\r\n                    email,\r\n                    password: Users.passwordHash(password),\r\n                    status: 'active'\r\n                },\r\n                attributes: {\r\n                    exclude: ['veryfication', 'createdAt','updatedAt']\r\n                }\r\n            });\r\n\r\n            if(!user){\r\n                throw HttpError(404, {\r\n                    errors:{\r\n                        message:'Invalid email or password'\r\n                    }\r\n                });\r\n            }\r\n\r\n            const token = JWT.sign({ userId: user.id }, JWT_SECRET);\r\n\r\n            res.json({\r\n                status: 'ok',\r\n                user,\r\n                token\r\n            })\r\n\r\n\r\n        }\r\n        catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    static async profile(req,res,next){\r\n        try{\r\n\r\n            const userId = req.userId;\r\n            const userProfile = await Users.findByPk(userId, {\r\n                attributes: { exclude: ['veryfication', 'createdAt','updatedAt'] }\r\n            });\r\n\r\n            res.json({\r\n                status:'ok',\r\n                userProfile\r\n            })\r\n        }\r\n        catch(e){\r\n            next(e)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default UsersController\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/UsersController.js b/controllers/UsersController.js
--- a/controllers/UsersController.js	(revision 09cc80c48418abb6687b9bbebef8e12f69f90d08)
+++ b/controllers/UsersController.js	(date 1701295562138)
@@ -126,7 +126,6 @@
             next(e);
         }
     }
-
     static async profile(req,res,next){
         try{
 
Index: routes/users.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Router } from \"express\";\r\nimport UsersController from \"../controllers/UsersController.js\";\r\nimport validate from \"../middlewares/validate.js\";\r\nimport usersSchema from \"../schema/usersSchema.js\";\r\n\r\nconst router = Router();\r\n\r\n\r\nrouter.post(\r\n  '/register',\r\n  validate(usersSchema.register),\r\n  UsersController.register\r\n);\r\n\r\nrouter.post('/activate', UsersController.activate)\r\n\r\nrouter.post('/login', validate(usersSchema.login), UsersController.login)\r\n\r\nrouter.get('/profile',UsersController.profile)\r\n\r\n\r\nexport default router;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/users.js b/routes/users.js
--- a/routes/users.js	(revision 09cc80c48418abb6687b9bbebef8e12f69f90d08)
+++ b/routes/users.js	(date 1701295562103)
@@ -13,10 +13,9 @@
 );
 
 router.post('/activate', UsersController.activate)
-
 router.post('/login', validate(usersSchema.login), UsersController.login)
 
 router.get('/profile',UsersController.profile)
 
 
-export default router;
\ No newline at end of file
+export default router;
Index: middlewares/authorization.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import jwt from \"jsonwebtoken\";\r\nimport HttpError from \"http-errors\";\r\n\r\nconst { JWT_SECRET } = process.env;\r\n\r\nconst EXCLUDES = [\r\n  'POST:/users/register',\r\n  'POST:/users/login',\r\n  'POST:/users/activate',\r\n  'POST:/categories/create',\r\n  'GET:/categories/list',\r\n  'POST:/toures/create',\r\n];\r\n\r\nexport default function authorization(req, res, next) {\r\n\r\n  try {\r\n    const requestPath = `${req.method}:${req.path}`;\r\n\r\n    if (EXCLUDES.includes(requestPath) || req.method === 'OPTIONS') {\r\n\r\n      next();\r\n      return;\r\n    }\r\n    if (requestPath.includes('PATCH:/categories/update/') || requestPath.includes('DELETE:/categories/delete/') ||  requestPath.includes('GET:/toures/getTour/')) {\r\n      next();\r\n      return;\r\n    }\r\n\r\n    const { authorization } = req.headers;\r\n\r\n    const { userId } = jwt.verify(authorization, JWT_SECRET)\r\n    if (!userId) {\r\n      throw HttpError(401)\r\n    }\r\n    req.userId = userId;\r\n    next();\r\n  } catch (e) {\r\n    e.status = 401;\r\n    next(e);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/middlewares/authorization.js b/middlewares/authorization.js
--- a/middlewares/authorization.js	(revision 09cc80c48418abb6687b9bbebef8e12f69f90d08)
+++ b/middlewares/authorization.js	(date 1701298270960)
@@ -28,8 +28,8 @@
     }
 
     const { authorization } = req.headers;
-
-    const { userId } = jwt.verify(authorization, JWT_SECRET)
+    const token = authorization.replace('Bearer', "").trim()
+    const { userId } = jwt.verify(token, JWT_SECRET)
     if (!userId) {
       throw HttpError(401)
     }
